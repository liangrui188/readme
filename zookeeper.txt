Zookeeper 分布式协调服务

不能根除部分失败，能够对部分失败进行正确处理

简单的
核心是精简的文件系统，提供一些简单的操作，和一些额外的抽象操作。例如排序和通知。
富有表现力的
可用于实现很多协调数据结构和协议。分布式队列、分布式锁和一组同级节点中的“领导者选举”
高可用性
帮助系统避免出现单点故障
松耦合交互方式
参与者不需要了解彼此
资源库
提供一个通用协调模式实现和方法的开源共享存储库

安装和运行Zookeeper
独立模式运行
export ZOOKEEPER_INSTALL=
export PATH=$ZOOKEEPER_INSTALL/bin:$PATH

在运行Zookeeper服务之前，我们需要新建一个配置文件conf/zoo.cfg
ZOOCFGDIR=
独立模式运行的最低要求
#基本时间单元/毫秒
tickTime=2000
#存储持久数据的本地文件系统位置
dataDir=/users/tom/zookeeper
#监听客户端连接的端口
clientPort=2181

bin/zkServer.sh start
echo ruok | nc localhost 2181 

dump 列出回话和短暂znode
envi 列出服务器属性
reqs 列出未完成的请求
stat 列出服务器统计信息和连接的客户端
srst 重置服务器的统计信息

有一组服务器为客户端提供某种服务，维护一个服务器的列表，不能存放在单点上。如果单点故障就需要从这个列表里面删除这个服务器

组成员管理应用
具有高可用性的文件系统，但这个文件系统里面没有文件和目录，而是统一使用节点的概念znode

public class CreateGroup implements Watcher {
	private final static SESSION_TIMEOUT = 5000;
	
	private ZooKeeper zk = null;
	private CountDownLatch connectedSignal = new CountDownLatch(1);
	
	public void connect(String hosts)throws IOException, InterruptedException{
		zk = new ZooKeeper(hosts, SESSION_TIMEOUT, this);
		connectedSignal.await();
	}
	
	@Override
	public void process(WatchedEvent event){
		if(event.getState() == KeeperState.SyncConnected){
			connectedSignal.countDown();
		}
	}
	
	public void create(String groupName)throws KeeperException, InterruptedException{
		String path = "/" + groupName;
		String createPath = zk.create(path, null/*data*/,Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
		System.out.println("Created " + createPath);
	}
	
	public void close()throws InterruptedException{
		zk.close();
	}
	
	public static void main(String[] args){
		CreateGroup createGroup = new CreateGroup();
		createGroup.connect(args[0]);
		createGroup.create(args[1]);
		createGroup.close();
	}
}

两种类型的znode
短暂的和持久的
客户端断开连接后短暂znode都会被Zookeeper服务删除

9种基本操作
create 必须有父节点
delete 要获取znode的版本号
list
exists 可以获取版本号 返回一个Stat对象，如果znode不存在则返回null public Stat exists(String path, Watcher watcher)throws KeeperException, InterruptedException
getACL/setACL
getChildren 
getData/setData 要获取znode的版本号
sync

数据模型
一个znode能存储的数据被限制在1MB以内

短暂znode 创建时确定，随后不能修改。短暂znode不可以有子节点，即使是短暂子节点
在任何时刻知道哪些组成员可以使用

顺序号，全局排序

Java 和 C
同步执行和异步执行

同步执行方法签名
public Stat exists(String path, Watcher watcher)throws KeeperException, InterruptedException
异步执行方法签名
public void exists(String path, Watcher watcher, StatCallback cb, Object ctx) throws KeeperException, InterruptedException

public void processResult(int rc, String path, Object ctx, Stat stat);

独立模式

复制模式

领导者选举

原子广播







